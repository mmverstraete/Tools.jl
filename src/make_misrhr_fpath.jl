"""
    misrhr_fpath = make_misrhr_fpath(; user = user, project = project,
        misr_path1 = misr_path1, misr_path2 = misr_path2,
        misr_orbit1 = misr_orbit1, misr_orbit2 = misr_orbit2,
        misr_block1 = misr_block1, misr_block2 = misr_block2,
        misr_site = misr_site, call_f = call_f, prdct = prdct, ftype = ftype)

# Purpose(s):
* Generate the full name `misrhr_fpath` of the directory containing the MISRHR file(s) for the specified `user` and `project`, for the geographical area generated by function `make_location`, in response to a request from function `call_f`, for the main product `prdct`, and for a file of type `ftype`.

# Positional argument(s): None.

# Keyword argument(s):
* `user::Union{AbstractString, Nothing} = "Dev"`: The user name.
* `project::Union{AbstractString, Nothing} = "Test"`: The project name.
* `misr_path1::Union{Integer, Nothing} = nothing`: The first (or only) MISR Path number.
* `misr_path2::Union{Integer, Nothing} = nothing`: The last MISR Path number.
* `misr_orbit1::Union{Integer, Nothing} = nothing`: The first (or only) MISR Orbit number.
* `misr_orbit2::Union{Integer, Nothing} = nothing`: The last MISR Orbit number.
* `misr_block1::Union{Integer, Nothing} = nothing`: The first (or only) MISR Block number.
* `misr_block2::Union{Integer, Nothing} = nothing`: The last MISR Block number.
* `misr_site::Union{AbstractString, Nothing} = nothing`: The MISR Local Mode Site name.
* `call_f::Union{AbstractString, Nothing} = nothing`: The name of the highest-level function requesting the use or creation of this directory; default value: "make_misrhr_fpath".
* `prdct::Union{AbstractString, Nothing} = nothing`: The name of the main product involved; default value: "all_prdcts".
* `ftype::Union{AbstractString, Nothing} = nothing`: The file type involved; default value: "all_ftypes".

# Return value(s):
* `misrhr_fpath::AbstractString`: The full name of the directory containing the MISRHR file(s) for the specified user, project, location, calling function, product and file type.

# Algorithm:
* This function sets the output value `misrhr_fpath` by concatenating a root and a relative directory, where the root directory is set
- to the environment variable `MROOT_SCRAP` if it is defined,
- to the environment variable `MROOT_SCRAP` if it is undefined while the environment variable `MROOT_MISRHR` is defined, and
- to the user's root directory `~` if both of those environment variables are undefined
and where the relative directory name is based on the keyword arguments provided.

# Reference(s):
* The MISR-HR Processing System Manual.

# Licensing:
* Copyright Â© 2023 Michel M. Verstraete,
    [MIT license](https://opensource.org/licenses/MIT).

# Notes:
* This function generates an absolute directory name but does not create it.
* Commented template to setup this function:

```
user =              [optional, if nothing or "" => "Dev"]
project =           [optional, if nothing or "" => "Test"]
misr_path1 =        [optional]
misr_path2 =        [optional]
misr_orbit1 =       [optional]
misr_orbit2 =       [optional]
misr_block1 =       [optional]
misr_block2 =       [optional]
misr_site =         [optional]
call_f =            [optional, if nothing or "" => "make_misrhr_fpath"]
prdct =             [optional, if "" => "all_prdcts"]
ftype =             [optional, if "" => "all_ftypes"]
```

# Example 1:
```julia
julia> using Tools

julia> set_mroots("Unset");

julia> misrhr_fpath = make_misrhr_fpath()
"~/Dev/Test/NOLOC/make_misrhr_fpath/all_prdcts/all_ftypes/"
```

# Example 2:
```
julia> using Tools

julia> set_mroots("Reset");

julia> misr_path1 = 168
168

julia> misr_orbit1 = 68050
68050

julia> misr_block1 = 110
110

julia> prdct = "L1RCCMMVR"
"L1RCCMMVR"

julia> ftype = "Map"
"Map"

julia> misrhr_fpath = make_misrhr_fpath(; misr_path1 = misr_path1, misr_orbit1 = misr_orbit1, misr_block1 = misr_block1, prdct = "L1RCCMMVR", ftype = "Map")
"/Users/michel/Projects/MISR/Scrap/Dev/Test/P168+O068050+B110/make_misrhr_fpath/L1RCCMMVR/Map/"
```

# Example 3:
```
julia> using Tools

julia> set_mroots("Reset");

julia> user = "John"
"John"

julia> project = "Test"
"Test"

julia> misr_path1 = 168
168

julia> misr_path2 = 170
170

julia> misr_orbit1 = 68000
68000

julia> misr_orbit2 = 72000
72000

julia> misr_site = "Skukuza"
"Skukuza"

julia> prdct = "L1RCCMmvr"
"L1RCCMmvr"

julia> ftype = "Map"
"Map"

julia> misrhr_fpath = make_misrhr_fpath(; user = user, project = project,
        misr_path1 = misr_path1, misr_path2 = misr_path2,
        misr_orbit1 = misr_orbit1, misr_orbit2 = misr_orbit2,
        misr_site = misr_site, prdct = prdct, ftype = ftype)
"/Users/michel/Projects/MISR/Scrap/John/Test/P168-P170+O068000-O072000+SITE-SKUKUZA/make_misrhr_fpath/L1RCCMmvr/Map/"
```
"""
function make_misrhr_fpath(;
    user::Union{AbstractString, Nothing} = nothing,
    project::Union{AbstractString, Nothing} = nothing,
    misr_path1::Union{Integer, Nothing} = nothing,
    misr_path2::Union{Integer, Nothing} = nothing,
    misr_orbit1::Union{Integer, Nothing} = nothing,
    misr_orbit2::Union{Integer, Nothing} = nothing,
    misr_block1::Union{Integer, Nothing} = nothing,
    misr_block2::Union{Integer, Nothing} = nothing,
    misr_site::Union{AbstractString, Nothing} = nothing,
    call_f::Union{AbstractString, Nothing} = nothing,
    prdct::Union{AbstractString, Nothing} = nothing,
    ftype::Union{AbstractString, Nothing} = nothing
    )::AbstractString

    # Define the path separator appropriate for the underlying operating system:
    path_sep = Base.Filesystem.path_separator

    # Initialize the output value `misrhr_fpath` with the scrap root path (if it is defined) or with the MISRHR root path (if it is defined), or with the user's home directory (otherwise):
    if "MROOT_SCRAP" in keys(ENV)
        misrhr_fpath = ENV["MROOT_SCRAP"]
    elseif "MROOT_MISRHR" in keys(ENV)
        misrhr_fpath = ENV["MROOT_MISRHR"]
    else
        misrhr_fpath = "~" * path_sep
    end

    if string(misrhr_fpath[lastindex(misrhr_fpath)]) != path_sep
        misrhr_fpath = misrhr_fpath * path_sep
    end

    # Add the `user` subdirectory:
    if (user === nothing) | (user == "")
        misrhr_fpath = misrhr_fpath * "Dev" * path_sep
    else
        misrhr_fpath = misrhr_fpath * user * path_sep
    end

    # Add the `project` subdirectory:
    if (project === nothing) | (project == "")
        misrhr_fpath = misrhr_fpath * "Test" * path_sep
    else
        misrhr_fpath = misrhr_fpath * project * path_sep
    end

    # Add the location subdirectory:
    location = make_location(;
        misr_path1 = misr_path1, misr_path2 = misr_path2,
        misr_orbit1 = misr_orbit1, misr_orbit2 = misr_orbit2,
        misr_block1 = misr_block1, misr_block2 = misr_block2,
        misr_site = misr_site)
    misrhr_fpath = misrhr_fpath * location * path_sep

    # Add the calling function subdirectory:
    if (call_f === nothing) | (call_f == "")
        misrhr_fpath = misrhr_fpath * "make_misrhr_fpath" * path_sep
    else
        misrhr_fpath = misrhr_fpath * call_f * path_sep
    end

    # Add the product name subdirectory:
    if (prdct === nothing) | (prdct == "")
        misrhr_fpath = misrhr_fpath * "all_prdcts" * path_sep
    else
        misrhr_fpath = misrhr_fpath * prdct * path_sep
    end

    # Add the file type subdirectory:
    if (ftype === nothing) | (ftype == "")
        misrhr_fpath = misrhr_fpath * "all_ftypes" * path_sep
    else
        misrhr_fpath = misrhr_fpath * ftype * path_sep
    end

    return misrhr_fpath

end
