"""
    misr_fspec = make_misr_fspec(misr_prdct, misr_path;
        misr_orbit = misr_orbit, misr_camera = misr_camera,
        misr_site = misr_site, misr_version = misr_version,
        ext = ext, misr_fpath = misr_fpath)

# Purpose(s):
* Return a `Vector` of one or nine specification(s) (path and name) for the MISR data file(s) corresponding to the specified arguments.

# Positional argument(s):
* `misr_prdct::AbstractString`: The MISR product acronym.
* `misr_path::Integer`: The MISR Path number.

# Keyword argument(s):
* `misr_orbit::Union{Integer, Nothing} = nothing`: The MISR Orbit number.
* `misr_camera::Union{AbstractString, Nothing} = nothing`: The MISR Camera name.
* `misr_site::Union{AbstractString, Nothing} = nothing`: The MISR Local Mode site name.
* `misr_version::Union{AbstractString, Nothing} = nothing`: The MISR product version identifier.
* `ext::Union{AbstractString, Nothing} = nothing`: The file extension.
* `misr_fpath::Union{AbstractString, Nothing} = nothing`: The output path to use instead of the default value.

# Return value(s):
* `misr_fspec::Vector{AbstractString}`: A `Vector` of one or nine specification(s) for the MISR data file(s) correponding to the input arguments.

# Algorithm:
* This function assembles the file specification(s) (path and name) of the MISR data file(s) corresponding to the arguments as follows:
- If the keyword argument `misr_fpath` exists, that value is used; otherwise a default value is generated by function `make_misr_fpath.jl`
- Function `make_misr_fname.jl` is called to generate the name of the file.
- These elements are concatenated to create a `Vector` of 1 or 9 file specifications, as appropriate.

# Reference(s):
* The MISRHR Processing System Manual.

# Licensing:
* Copyright © 2023 Michel M. Verstraete,
    [MIT license](https://opensource.org/licenses/MIT).

# Note(s):
* This function assumes that MISR data file(s) are organized as described in the User Manual.
* This function verifies the validity of all arguments except `misr_version`.
* This function does not verify that the path name `misr_fpath` component of the output value `misr_fspec` exists.
* Function `set_mroots.jl` should be called prior to this function to temporarily define the MISR root directory. To make those definitions permanent, add them to the configuration file `.zshenv` (or equivalent).
* This function always returns a `Vector` of 1 or 9 file name(s).

# Example 1:
```julia
julia> using Tools

julia> set_mroots("Reset");

julia> misr_fspec = make_misr_fspec("L1RTGM", 168;
        misr_orbit = 68050, misr_camera = "AN", misr_site = "", misr_version = "")
1-element Vector{AbstractString}:
 "/Volumes/MISR_Data0/P168/L1RTGM" ⋯ 22 bytes ⋯ "GM_P168_O068050_AN_F03_0024.hdf"

 julia> misr_fspec[1]
"/Volumes/MISR_Data0/P168/L1RTGM/MISR_AM1_GRP_TERRAIN_GM_P168_O068050_AN_F03_0024.hdf"
```

# Example 2:
```
julia> using Tools

julia> set_mroots("Reset");

julia> misr_fspec = make_misr_fspec("L1RCCM", 168;
        misr_orbit = 68050, misr_camera = "*")
9-element Vector{AbstractString}:
 "/Volumes/MISR_Data0/P168/L1RCCM" ⋯ 19 bytes ⋯ "GM_P168_O068050_DF_F04_0025.hdf"
 "/Volumes/MISR_Data0/P168/L1RCCM" ⋯ 19 bytes ⋯ "GM_P168_O068050_CF_F04_0025.hdf"
 "/Volumes/MISR_Data0/P168/L1RCCM" ⋯ 19 bytes ⋯ "GM_P168_O068050_BF_F04_0025.hdf"
 "/Volumes/MISR_Data0/P168/L1RCCM" ⋯ 19 bytes ⋯ "GM_P168_O068050_AF_F04_0025.hdf"
 "/Volumes/MISR_Data0/P168/L1RCCM" ⋯ 19 bytes ⋯ "GM_P168_O068050_AN_F04_0025.hdf"
 "/Volumes/MISR_Data0/P168/L1RCCM" ⋯ 19 bytes ⋯ "GM_P168_O068050_AA_F04_0025.hdf"
 "/Volumes/MISR_Data0/P168/L1RCCM" ⋯ 19 bytes ⋯ "GM_P168_O068050_BA_F04_0025.hdf"
 "/Volumes/MISR_Data0/P168/L1RCCM" ⋯ 19 bytes ⋯ "GM_P168_O068050_CA_F04_0025.hdf"
 "/Volumes/MISR_Data0/P168/L1RCCM" ⋯ 19 bytes ⋯ "GM_P168_O068050_DA_F04_0025.hdf"

 julia> misr_fspec[4]
"/Volumes/MISR_Data0/P168/L1RCCM/MISR_AM1_GRP_RCCM_GM_P168_O068050_AF_F04_0025.hdf"
```
"""
function make_misr_fspec(
    misr_prdct::AbstractString,
    misr_path::Integer;
    misr_orbit::Union{Integer, Nothing} = nothing,
    misr_camera::Union{AbstractString, Nothing} = nothing,
    misr_site::Union{AbstractString, Nothing} = nothing,
    misr_version::Union{AbstractString, Nothing} = nothing,
    ext::Union{AbstractString, Nothing} = nothing,
    misr_fpath::Union{AbstractString, Nothing} = nothing
    )::Vector{AbstractString}

    # If `misr_fpath` is explicitly provided, use that value; otherwise generate the default value:
    if misr_fpath === nothing
        misr_fpath = make_misr_fpath(misr_prdct, misr_path)
    end

    if misr_fpath[lastindex(misr_fpath)] != '/'
        misr_fpath = misr_fpath * '/'
    end

    # Generate the name(s) of the data file(s):
    misr_fname = make_misr_fname(misr_prdct, misr_path;
        misr_orbit = misr_orbit, misr_camera = misr_camera,
        misr_site = misr_site, misr_version = misr_version, ext = ext)

    # Generate the file specification(s) of the desired data file(s):
    nfiles = length(misr_fname)
    misr_fspec = Vector{AbstractString}(undef, nfiles)

    if nfiles == 1
        misr_fspec[1] = misr_fpath * misr_fname[1]
    else
        for i = 1:nfiles
            misr_fspec[i] = misr_fpath * misr_fname[i]
        end
    end

    return misr_fspec

end
